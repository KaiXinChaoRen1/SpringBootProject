在同一级目录下优先级为：properties > yml > yaml


yaml基本语法**
    - 大小写敏感
    - 数据值前边必须有空格，作为分隔符
    - 使用缩进表示层级关系
    - 缩进时不允许使用Tab键，(idea这种高级软件可以)只允许使用空格（各个系统 Tab对应的 空格数目可能不同，导致层次混乱）。
    - 缩进的空格数量不重要，只要相同层级的元素左侧对齐即可
    - #表示注释，从这个字符一直到行尾，都会被解析器忽略。
    - ""包裹可以使用转义字符


## **11-SpringBoot配置-profile**
1.  **profile是用来完成不同环境下，配置动态切换功能的**。
2.  **profile配置方式**
   ​	多profile文件方式：提供多个配置文件，每个代表一种环境。
   ​		application-dev.properties/yml 开发环境
   ​		application-test.properties/yml 测试环境
   ​		application-pro.properties/yml 生产环境
   ​    yml多文档方式：
​				在yml中使用  --- 分隔不同配置
3.  **profile激活方式**
- 配置文件： 再配置文件中配置：spring.profiles.active=dev
- 虚拟机参数：在Edit Configuration中VM options 指定：-Dspring.profiles.active=dev
- 命令行参数：java –jar xxx.jar  --spring.profiles.active=dev

## **12-SpringBoot配置-项目内部配置文件加载顺序**
 加载顺序为此的排列顺序，高优先级配置的属性会生效

- file:./config/：当前*项目*下的/config目录下
- file:./           ：当前项目的根目录
- classpath:/config/：classpath的/config目录
- classpath:/  ：classpath的根目录（我们常用的的resource会打包进这里边）

## **13-SpringBoot配置-项目外部配置加载顺序**
 外部配置文件的使用是为了对内部文件的配合
1.命令行
```cmd
java -jar app.jar --name="Spring“ --server.port=9000
```

2.指定配置文件位置
```cmd
 java -jar myproject.jar --spring.config.location=e://application.properties
```

3.外部不带profile的properties文件
```java
    classpath:/config/application.properties
    classpath:/application.properties
```
